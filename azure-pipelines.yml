trigger:
  branches: 
    include: 
      - main

variables:
   - group: certificateCredential

stages:
############################################################
## Build Stage
############################################################

- stage: Build
  dependsOn: []
  jobs:

############################################################
## installs: npm dependencies 
############################################################
    - job: build_package 
      displayName: SPFx build and packaging
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.13.0' # Specify the Node.js version to use
        - script: npm ci
          displayName: Install npm dependencies 

############################################################
## updates the required libraryId for .yo-rc.json using cipher.json
## updates the required configs (name, id, zippedPackage) for package-solution.json using cipher.json
## updates the required configs (groupId, id, title) for .manifest.json using cipher.json
############################################################
        - script: |
            echo "Installing jq"
            sudo apt-get update && sudo apt-get install -y jq
          displayName: Install jq

        - script: |
            echo "Reading libraryId from yoRc in cipher.json"
            LIBRARY_ID=$(jq -r '.libraryId' $(Build.SourcesDirectory)/config/environment/cipher.json)
            echo "Using libraryId: $LIBRARY_ID"
          displayName: Read libraryId from .yo-rc.json and write to be used config


        - script: |
            echo "Injecting libraryId from cipher.json into .yo-rc.json"
            LIBRARY_ID=$(jq -r '.libraryId' config/environment/cipher.json)
            jq --arg libId "$LIBRARY_ID" '.["@microsoft/generator-sharepoint"].libraryId = $libId' .yo-rc.json > temp.json && mv temp.json .yo-rc.json
          displayName: Inject libraryId
        
        - script: |
            echo "Reading id, name, zippedPackage from packageSolution.json"
            ID=$(jq -r '.id' config/environment/cipher.json)
            NAME=$(jq -r '.name' config/environment/cipher.json)
            ZIPPED_PACKAGE=$(jq -r '.zippedPackage' config/environment/cipher.json)
            echo "Using Id: $ID"
            echo "Using Name: $NAME"
            echo "Using Zipped Package: $ZIPPED_PACKAGE"
          displayName: Read id, name, zippedPackage from package-solution.json and write to be used config
        
        - script: |
            echo "Injecting id, name, zippedPackage from cipher.json into package-solution.json"
            ID=$(jq -r '.id' config/environment/cipher.json)
            jq --arg id "ID" '.solution.id = $id' config/package-solution.json > temp.json && mv temp.json config/package-solution.json
            NAME=$(jq -r '.name' config/environment/cipher.json)
            jq --arg name "NAME" '.solution.name = $name' config/package-solution.json > temp.json && mv temp.json config/package-solution.json
            ZIPPED_PACKAGE=$(jq -r '.zippedPackage' config/environment/cipher.json)
            jq --arg zippedPackage "ZIPPED_PACKAGE" '.paths.zippedPackage = $zippedPackage' config/package-solution.json > temp.json && mv temp.json config/package-solution.json
          displayName: Inject id, name, zippedPackage
          
        - script: |
            echo "Reading id, title, and groupId from .manifest.json"
            MANIFEST_ID=$(jq -r '.webPartManifest.id' config/environment/cipher.json)            
            TITLE=$(jq -r '.webPartManifest.title' config/environment/cipher.json)
            GROUP_ID=$(jq -r '.webPartManifest.groupId' config/environment/cipher.json)
            echo "Using Id: $MANIFEST_ID"
            echo "Using Title: $TITLE"
            echo "Using GroupId: $GROUP_ID"
          displayName: Read id, groupId, and title from .manifest.json and write to be used in config
          #            jq --arg manifestid "MANIFEST_ID" '.webPartManifest.id = $manifest_id' src\webparts\helloBuildPipeline\HelloBuildPipelineWebPart.manifest.json > temp.json && mv temp.json src\webparts\helloBuildPipeline\HelloBuildPipelineWebPart.manifest.json
          #            jq --arg title "$TITLE" '.title.default = $title' src/helloBuildPipeline/loc/HelloBuildPipeline.manifest.json > temp.json && mv temp.json src/helloBuildPipeline/loc/HelloBuildPipeline.manifest.json
          #            jq --arg groupid "GROUP_ID" '.webPartManifest.id = $group_id' src\webparts\helloBuildPipeline\HelloBuildPipelineWebPart.manifest.json > temp.json && mv temp.json src\webparts\helloBuildPipeline\HelloBuildPipelineWebPart.manifest.json

############################################################
## executes: gulp build and cleans
############################################################
        - task: gulp@0
          displayName: SPFx clean
          inputs:
            targets: clean
        - task: gulp@0
          displayName: SPFx build
          inputs:
            targets: build

############################################################
## executes: gulp bundle --ship 
############################################################
        - task: gulp@0
          displayName: SPFx bundle 
          inputs:
            targets: bundle
            arguments: --ship

############################################################
## executes: gulp package-solution --ship
############################################################
        - task: gulp@0
          displayName: SPFx package solution 
          inputs:
            targets: package-solution 
            arguments: --ship

############################################################
## evaluates: the name of the generated *.sppkg package
############################################################
        - script: |
            CMD_GET_SPPKG_NAME=$(find . -name '*.sppkg' -exec basename {} \;)
            echo "##vso[task.setvariable variable=SpPkgFilename;isOutput=true]${CMD_GET_SPPKG_NAME}"
          displayName: Get generated *.sppkg filename 
          name: GetSharePointPackage

############################################################
## copies: *.sppkg as a build artifact 
############################################################
        - task: CopyFiles@2
          inputs:
            sourceFolder: $(Build.Repository.LocalPath)/sharepoint/solution
            contents: '**/*.sppkg'
            targetFolder: $(Build.ArtifactStagingDirectory)  

############################################################
## publishes: *.sppkg as a build artifact 
###########################################################
        - task: PublishBuildArtifacts@1
          displayName: Publish SharePoint Package (*.sppkg)
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)
            artifactName: spfx-package
            publishLocation: 'Container'